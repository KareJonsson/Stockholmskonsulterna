/* Generated By:JavaCC: Do not edit this line. TabParserTokenManager.java */
package se.modlab.generics.sstruct.tables;
/*
import java.util.*;
import se.modlab.generics.sstruct.values.*;
*/
import se.modlab.generics.files.*;
import java.io.*;
import se.modlab.generics.exceptions.*;
import se.modlab.generics.bshro.ifc.HierarchyObject;

/** Token Manager. */
public class TabParserTokenManager implements TabParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 152;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 13);
                  else if ((0xc00100000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(14, 18);
                  else if (curChar == 45)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  else if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(25, 27);
                  }
                  if ((0x6000000000000L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 9:
                  if ((0xc00100000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(30, 32);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(33, 35);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 29:
                  if (curChar == 34 && kind > 17)
                     kind = 17;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(25, 27);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(36, 12);
                  break;
               case 37:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(37, 12);
                  break;
               case 52:
                  if (curChar == 45)
                     jjCheckNAddStates(19, 21);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(40, 42);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(40, 42);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(58, 18);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x500000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(43, 45);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(43, 45);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(64, 24);
                  break;
               case 65:
                  if (curChar == 39)
                     jjCheckNAddStates(14, 18);
                  break;
               case 66:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if (curChar == 39 && kind > 16)
                     kind = 16;
                  break;
               case 69:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 67);
                  break;
               case 71:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 72:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 74:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 76:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 77:
                  if (curChar == 39 && kind > 17)
                     kind = 17;
                  break;
               case 78:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 79:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 80:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 82:
                  if ((0x6000000000000L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 87:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 90:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(53, 55);
                  break;
               case 92:
                  if (curChar == 32)
                     jjCheckNAddStates(53, 55);
                  break;
               case 93:
                  if ((0x7000000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 95:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 96:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 97:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 98:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(56, 58);
                  break;
               case 100:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 101:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 102:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 103:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(105);
                  break;
               case 105:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0xa00000000000L & l) != 0L)
                     jjCheckNAddTwoStates(113, 114);
                  break;
               case 113:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0xa00000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 116:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(59, 61);
                  break;
               case 118:
                  if (curChar == 32)
                     jjCheckNAddStates(59, 61);
                  break;
               case 119:
                  if ((0x7000000000000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 121:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 123:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 124:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(62, 64);
                  break;
               case 126:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 127:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 128:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 129:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(131);
                  break;
               case 131:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 13);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(136, 137);
                  break;
               case 138:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(139);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(139, 18);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 142:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(143);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(143, 18);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 146:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(147);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(147, 24);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 150:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(151);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(151, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 84)
                     jjAddStates(71, 72);
                  else if (curChar == 70)
                     jjAddStates(73, 74);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 5)
                     kind = 5;
                  break;
               case 1:
               case 50:
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 101 && kind > 6)
                     kind = 6;
                  break;
               case 5:
               case 43:
                  if (curChar == 115)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((0x100000001000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 18:
                  if ((0x5000000050L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 24:
                  if ((0x5000000050L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(79, 81);
                  break;
               case 28:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 35:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(36, 12);
                  break;
               case 38:
                  if (curChar == 70)
                     jjAddStates(73, 74);
                  break;
               case 39:
                  if (curChar == 69 && kind > 6)
                     kind = 6;
                  break;
               case 40:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 84)
                     jjAddStates(71, 72);
                  break;
               case 47:
                  if (curChar == 69 && kind > 5)
                     kind = 5;
                  break;
               case 48:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 66:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar == 92)
                     jjAddStates(86, 88);
                  break;
               case 69:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 74:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 75:
                  if (curChar == 92)
                     jjAddStates(89, 91);
                  break;
               case 76:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 137:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 141:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(94, 95);
                  break;
               case 145:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 149:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(98, 99);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(46, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 152 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   53, 54, 136, 137, 140, 141, 18, 59, 60, 144, 145, 148, 149, 24, 66, 68, 
   74, 75, 77, 10, 53, 59, 26, 27, 29, 35, 37, 12, 83, 109, 14, 15, 
   18, 20, 21, 24, 26, 27, 31, 29, 55, 56, 18, 61, 62, 24, 74, 75, 
   77, 74, 75, 79, 77, 92, 93, 94, 100, 101, 105, 118, 119, 120, 126, 127, 
   131, 140, 141, 18, 148, 149, 24, 49, 51, 42, 45, 16, 17, 22, 23, 28, 
   30, 32, 57, 58, 63, 64, 69, 70, 72, 76, 78, 80, 138, 139, 142, 143, 
   146, 147, 150, 151, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\12", null, null, null, null, null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xf63e1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[152];
private final int[] jjstateSet = new int[304];
protected char curChar;
/** Constructor. */
public TabParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TabParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 152; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
