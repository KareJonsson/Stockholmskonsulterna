/* Generated By:JavaCC: Do not edit this line. TabParser.java */
package se.modlab.generics.sstruct.tables;

/*
import java.util.*;
import se.modlab.generics.sstruct.values.*;
*/
import se.modlab.generics.files.*;
import java.io.*;
import se.modlab.generics.exceptions.*;
import se.modlab.generics.bshro.ifc.HierarchyObject;

public class TabParser implements TabParserConstants {

  //private static File MotherCatalogue = null;
  //private static Vector files = null;
  private DatetimeHandler dth;
  private static String lastFilename = null;

  public static void main(String [] args)
  {
    if(args.length != 1) {
      System.out.println("Ett argument (och det skall vara en fil)");
      return;
    }
    try
    {
      parseFromFilename(args[0]);
    }
    catch(IntolerableException e)
    {
      System.out.println(e.toString());
    }
  }

/*
  public static void setMotherCatalogue(File f)
  {
    if(f == null) return;
    MotherCatalogue = f;
    //files = new Vector();
    //System.out.println("TabParser.setMotherCatalogue sets "+f.getAbsolutePath());
  }

  public static File getMotherCatalogue()
  {
    if(MotherCatalogue == null) return new File(System.getProperty("user.dir"));
    return MotherCatalogue;
  }
*/

  public static TableHolder parseFromFilename(String filename)
    throws IntolerableException
  {
        try {
        lastFilename = filename;
        return parseFromInputStream(new FileInputStream(HierarchyObject.getReferenceFilePath()+filename), null);
        }
        catch(FileNotFoundException fnfe) {
                throw new InternalProgrammingError("File "+filename+" was not found.", fnfe);
        }
  }

  public static TableHolder parseFromFilename(String filename, DatetimeHandler dth)
    throws IntolerableException
  {
    lastFilename = filename;
    FileCollector fc = null;
    try
    {
      //fc = new FileCollector(System.getProperty("user.dir")+filename);
      //File f = fc.getFile();
      String filesPath = HierarchyObject.getReferenceFilePath()+filename;
      //System.out.println("Verklig fil = "+filesPath);
      fc = new FileCollector(filesPath);
      if(!fc.getOk()) throw fc.getException();
      //files.addElement(fc);
      //System.out.println("Fil att parsea \n"+fc.getFilecontents());
      return parse(new ByteArrayInputStream(fc.getFilecontents().getBytes()),
                   fc,
                   dth);
    }
    catch(IntolerableException ie)
    {
      if(fc != null) ie.setCollectors(new FileCollector[] { fc });
      throw ie;
    }
    catch(FileNotFoundException fnfe)
    {
      IntolerableException ie = new SystemError("File not found", fnfe);
      if(fc != null) ie.setCollectors(new FileCollector[] { fc });
      throw ie;
    }
    catch(IOException ioe)
    {
      IntolerableException ie = new SystemError("I/O error", ioe);
      if(fc != null) ie.setCollectors(new FileCollector[] { fc });
      throw ie;
    }
    catch(NumberFormatException nfe)
    {
      IntolerableException ie = new UserCompiletimeError("Number format error in table read as separated list.", nfe);
      if(fc != null) ie.setCollectors(new FileCollector[] { fc });
      throw ie;
    }
    catch(OutOfMemoryError oome)
    {
      IntolerableException ie = new SystemError("Out of memory error in table read as separated list.", oome);
      if(fc != null) ie.setCollectors(new FileCollector[] { fc });
      throw ie;
    }
    catch(Exception e)
    {
      IntolerableException ie = new UnclassedError("TabParser.parseFromFile - Exception", e);
      if(fc != null) ie.setCollectors(new FileCollector[] { fc });
      throw ie;
    }
  }

  public static TableHolder parseFromInputStream(InputStream is, DatetimeHandler dth)
    throws IntolerableException
  {
    return parse(is, new FileCollector("Editor window", "stream"), dth);
  }

  public static TableHolder parseFromString(String program)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    return parseFromString(program, null);
  }

  public static TableHolder parseFromFile(File f, DatetimeHandler dth)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    try {
        return parse(new FileInputStream(f), new FileCollector(f.getName(), "stream"), dth);
    }
    catch(FileNotFoundException fnfe) {
        throw new UserCompiletimeError("No such file "+f.getName(), fnfe);
    }
  }

  public static TableHolder parseFromString(String program, DatetimeHandler dth)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    return parse(new ByteArrayInputStream(program.getBytes()),
                 new FileCollector("No name", program),
                 dth);
  }

  public void setDatetimeHandler(DatetimeHandler _dth)
  {
    dth = _dth;
  }

  private static TableHolder parse(InputStream is,
                             FileCollector fc,
                             DatetimeHandler dth)
    throws IntolerableException
  {
    TabParser parser = new TabParser(is);
    if(dth != null)
    {
      parser.setDatetimeHandler(dth);
    }
    else
    {
      parser.setDatetimeHandler(new DefaultDatetimeHandler());
    }
    try
    {
      TableHolder t = parser.parseTable();
      t.setCollector(fc);
      return t;
    }
    catch(IntolerableException ie)
    {
      throw ie;
    }
    catch(ParseException e)
    {
      throw new UserCompiletimeError("Syntax error i table read as separated list.", e);
    }
    catch(TokenMgrError tme)
    {
      throw new UserCompiletimeError("Lexical error in table read as separated list.", tme);
    }
    catch(NumberFormatException nfe)
    {
      throw new UserCompiletimeError("Number format error in table read as separated list.", nfe);
    }
    catch(OutOfMemoryError oome)
    {
      throw new SystemError("Out of memory error in table read as separated list.", oome);
    }
    catch(Exception e)
    {
      throw new UnclassedError("Undiagnosticised error in table reading.", e);
    }
  }

  public static boolean parseDatetimeFromString(String program)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    return parseDatetimeFromString(program, null);
  }

  public static boolean parseStringFromString(String program)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    return parseStringFromString(program, null);
  }

  public static boolean parseDatetimeFromString(String program, DatetimeHandler dth)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    return parseDatetime(new ByteArrayInputStream(program.getBytes()),
                 new FileCollector("No name", program),
                 dth);
  }

  public static boolean parseStringFromString(String program, DatetimeHandler dth)
    throws IntolerableException
  {
    lastFilename = "Editor window";
    return parseString(new ByteArrayInputStream(program.getBytes()),
                 new FileCollector("No name", program),
                 dth);
  }

  private static boolean parseDatetime(InputStream is,
                                     FileCollector fc,
                                     DatetimeHandler dth)
    throws IntolerableException
  {
    TabParser parser = new TabParser(is);
    if(dth != null)
    {
      parser.setDatetimeHandler(dth);
    }
    else
    {
      parser.setDatetimeHandler(new DefaultDatetimeHandler());
    }
    try
    {
      return parser.parseDatetime();
    }
    catch(IntolerableException ie)
    {
      throw ie;
    }
    catch(ParseException e)
    {
      throw new UserCompiletimeError("Syntax error i table read as separated list.", e);
    }
    catch(TokenMgrError tme)
    {
      throw new UserCompiletimeError("Lexical error in table read as separated list.", tme);
    }
    catch(NumberFormatException nfe)
    {
      throw new UserCompiletimeError("Number format error in table read as separated list.", nfe);
    }
    catch(OutOfMemoryError oome)
    {
      throw new SystemError("Out of memory error in table read as separated list.", oome);
    }
    catch(Exception e)
    {
      throw new UnclassedError("Undiagnosticised error in table reading.", e);
    }
  }

  private static boolean parseString(InputStream is,
                                     FileCollector fc,
                                     DatetimeHandler dth)
    throws IntolerableException
  {
    TabParser parser = new TabParser(is);
    if(dth != null)
    {
      parser.setDatetimeHandler(dth);
    }
    else
    {
      parser.setDatetimeHandler(new DefaultDatetimeHandler());
    }
    try
    {
      return parser.parseStringValue() != null;
    }
    catch(IntolerableException ie)
    {
      throw ie;
    }
    catch(ParseException e)
    {
      throw new UserCompiletimeError("Syntax error i table read as separated list.", e);
    }
    catch(TokenMgrError tme)
    {
      throw new UserCompiletimeError("Lexical error in table read as separated list.", tme);
    }
    catch(NumberFormatException nfe)
    {
      throw new UserCompiletimeError("Number format error in table read as separated list.", nfe);
    }
    catch(OutOfMemoryError oome)
    {
      throw new SystemError("Out of memory error in table read as separated list.", oome);
    }
    catch(Exception e)
    {
      throw new UnclassedError("Undiagnosticised error in table reading.", e);
    }
  }

/**********************************************************
 * THE COMMA SEPARATED TABLE LANGUAGE GRAMMAR STARTS HERE *
 **********************************************************/
  final public boolean parseDatetime() throws ParseException, IntolerableException {
  Holder h = null;
    h = parseDatetimeValue();
    {if (true) return h != null;}
    throw new Error("Missing return statement in function");
  }

  final public TableHolder parseTable() throws ParseException, IntolerableException {
  TableHolder tab = null;
  LineHolder l = null;
    l = parseOneLine();
    tab = new TableHolder(l);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LINEFEED:
      case DELIMITER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL_CORRECT:
      case FLOATING_POINT_LITERAL_MICROSOFT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case DATETIME_LITERAL_CORRECT:
      case DATETIME_LITERAL_MICROSOFT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      l = parseOneLine();
      tab.addLine(l);
    }
    {if (true) return tab;}
    throw new Error("Missing return statement in function");
  }

  final public LineHolder parseOneLine() throws ParseException, IntolerableException {
  Holder val = null;
  LineHolder l = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case DELIMITER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL_CORRECT:
      case FLOATING_POINT_LITERAL_MICROSOFT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case DATETIME_LITERAL_CORRECT:
      case DATETIME_LITERAL_MICROSOFT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELIMITER:
        jj_consume_token(DELIMITER);
      if(val == null)
      {
        Holder _val = new VoidHolder(null, -1, -1);
        if(l == null)
        {
          l = new LineHolder(_val);
        }
        else
        {
          l.addValue(_val);
        }
      }
      else
      {
        val = null;
      }
        break;
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL_CORRECT:
      case FLOATING_POINT_LITERAL_MICROSOFT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case DATETIME_LITERAL_CORRECT:
      case DATETIME_LITERAL_MICROSOFT:
        val = parseAnyValueForced();
      if(l == null)
      {
        l = new LineHolder(val);
      }
      else
      {
        l.addValue(val);
      }
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LINEFEED);
    //System.out.println("Rader "+l.getNoValues());
    if(l == null) {if (true) return new LineHolder(null);}
    if(val == null) l.addValue(new VoidHolder(null, -1, -1));
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Holder parseAnyValueForced() throws ParseException, IntolerableException {
  Holder val = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      val = parseBooleanValue();
      break;
    case INTEGER_LITERAL:
      val = parseIntegerValue();
      break;
    case FLOATING_POINT_LITERAL_CORRECT:
    case FLOATING_POINT_LITERAL_MICROSOFT:
      val = parseFloatValue();
      break;
    case DATETIME_LITERAL_CORRECT:
    case DATETIME_LITERAL_MICROSOFT:
      val = parseDatetimeValue();
      break;
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      val = parseStringValue();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanHolder parseBooleanValue() throws ParseException, IntolerableException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      {if (true) return new BooleanHolder(true, t.beginLine, t.beginColumn);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      {if (true) return new BooleanHolder(false, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LongHolder parseIntegerValue() throws ParseException, IntolerableException {
  Token t = null;
    t = jj_consume_token(INTEGER_LITERAL);
    long l = Long.parseLong(t.image);
    {if (true) return new LongHolder(l, t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public DoubleHolder parseFloatValue() throws ParseException, IntolerableException {
  Token t = null;
  double d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATING_POINT_LITERAL_CORRECT:
      t = jj_consume_token(FLOATING_POINT_LITERAL_CORRECT);
      d = Double.parseDouble(t.image);
      {if (true) return new DoubleHolder(d, t.beginLine, t.beginColumn);}
      break;
    case FLOATING_POINT_LITERAL_MICROSOFT:
      t = jj_consume_token(FLOATING_POINT_LITERAL_MICROSOFT);
      d = Double.parseDouble(t.image.replace(',', '.'));
      {if (true) return new DoubleHolder(d, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Holder parseDatetimeValue() throws ParseException, IntolerableException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATETIME_LITERAL_CORRECT:
      t = jj_consume_token(DATETIME_LITERAL_CORRECT);
      {if (true) return dth.getHolder(t.image, t.beginLine, t.beginColumn);}
      break;
    case DATETIME_LITERAL_MICROSOFT:
      t = jj_consume_token(DATETIME_LITERAL_MICROSOFT);
      {if (true) return dth.getHolder(t.image.replace('-', '/'), t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StringHolder parseStringValue() throws ParseException, IntolerableException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new StringHolder(t.image, t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TabParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf63e0,0xf6360,0xf6360,0xf6260,0x60,0x6000,0xc0000,0x30000,};
   }

  /** Constructor with InputStream. */
  public TabParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TabParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TabParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TabParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TabParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TabParser(TabParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TabParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
